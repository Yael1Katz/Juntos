{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/google-map/google-map.component.ts","./src/app/components/google-map/google-map.component.html","./src/app/services/geo.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","<app-google-map>\n\n</app-google-map>\n<!-- <div>yael test</div> -->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport {environment} from '../environments/environment';\nexport const firebaseConfig = environment.firebaseConfig;\nimport {AgmCoreModule} from '@agm/core';\n\n// 1. Import the libs you need\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { AngularFireStorageModule } from '@angular/fire/storage';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\n\n\nimport { GeoService } from './services/geo.service';\nimport { GoogleMapComponent } from './components/google-map/google-map.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GoogleMapComponent\n  ],\n  imports: [\n    BrowserModule,\n    AngularFireModule.initializeApp(firebaseConfig),\n    AngularFirestoreModule, // firestore\n    AngularFireAuthModule, // auth\n    AngularFireStorageModule, // storage\n    AgmCoreModule.forRoot({\n      apiKey: environment.googleMapsKey\n    })\n  ],\n  providers: [GeoService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { GeoService } from 'src/app/services/geo.service';\n\n@Component({\n  selector: 'app-google-map',\n  templateUrl: './google-map.component.html',\n  styleUrls: ['./google-map.component.scss']\n})\nexport class GoogleMapComponent implements OnInit {\n  lat: number;\n  lng:number;\n  points: any;\n\n  constructor(private geo: GeoService) {\n\n\n   }\n\n  ngOnInit() {\n    this.getUserLocation();\n    this.geo.hits.subscribe(hits => this.points = hits);\n\n  }\n\n  private getUserLocation(){\n    if(navigator.geolocation){\n      navigator.geolocation.getCurrentPosition(position =>{\n        this.lat = position.coords.latitude;\n        this.lng = position.coords.longitude;\n\n        \n        this.geo.getLocations(500, [this.lat, this.lng]);\n      });\n    }\n  }\n\n  trackByFn(_, doc) {\n    return doc.id;\n  }\n\n  createPoint(lat, lng) {\n    // const collection = this.geo.hits('places')\n\n    // // Use the convenience method\n    // collection.setPoint('my-place', lat, lng)\n\n    // // Or be a little more explicit \n    // const point = this.geo.point(lat, lng)\n    // collection.setDoc('my-place', { position: point.data })\n  }\n}\n","<agm-map [latitude]=\"31.0461\" [longitude]=\"34.8516\" [zoom]=\"8\">\n    <agm-marker *ngFor=\"let point of points\"\n    [latitude]=\"point.lat\"\n    [longitude]=\"point.long\">\n        <agm-info-window>\n            <!-- <h1>This point is {{ point.queryMetadata.distance }} kilometers from the center</h1> -->\n            <!-- <h1>This point is {{ point.contact }} kilometers from the center</h1> -->\n            <h1>Date: {{ point.time }}</h1>\n            <h1>Type: {{point.type}}</h1>\n        </agm-info-window>\n    </agm-marker>\n</agm-map>\n\n\n\n\n\n\n  <!-- <agm-map [latitude]=\"34\" [longitude]=\"-113\" [zoom]=\"8\">\n    <agm-marker *ngFor=\"let point of points | async; trackBy: trackByFn\"\n    <agm-marker *ngFor=\"let point of points | async\"\n    [latitude]=\"point.position.geopoint.latitude\"\n    [longitude]=\"point.position.geopoint.longitude\">\n        <agm-info-window>\n            <h1>This point is {{ point.queryMetadata.distance }} kilometers from the center</h1>\n        </agm-info-window>\n    </agm-marker>\n</agm-map> -->\n\n\n<!-- <div *ngIf=\"lat && lng\">\n    <agm-map [latitude]=\"lat\" [longitude]=\"lng\">\n\n        <agm-marker \n          *ngFor=\"let marker of markers\"\n          [latitude]=\"marker.location[0]\" \n          [longitude]=\"marker.location[1]\"\n          [iconUrl] = \"https://cdn4.iconfinder.com/data/icons/ios-web-user-interface-multi-circle-flat-vol-7/512/Glass_handle_tea_coffee_tea_cup-512.png\">\n    \n            <agm-info-window>\n    \n                <h3><strong>Location Details</strong></h3>\n                    <p>You are {{marker.distance}} kilometers from this point</p>\n    \n            </agm-info-window>\n        </agm-marker>\n    \n    </agm-map>\n</div>\n -->\n","import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\n//import * as geofirex from \"geofirex\";\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n// Init Firebase\n//import * as firebase from 'firebase/app';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeoService {\n  dbRef: any;\n  geoFire: any;\n  //hits = new BehaviorSubject([]);\n\n  hits: any;\n  // firebaseConfig: {apiKey: \"AIzaSyA6y_z7dvkzp3K1DcY-ZscHrFuXGu9gKaI\",\n  // authDomain: \"together-corona.firebaseapp.com\",\n  // databaseURL: \"https://together-corona.firebaseio.com\",\n  // projectId: \"together-corona\",\n  // storageBucket: \"together-corona.appspot.com\",\n  // messagingSenderId: \"354068360803\",\n  // appId: \"1:354068360803:web:4c28d7f7f882ff2b6f9256\"};\n\n\n\n  constructor(private db: AngularFirestore) { \n    //this.things = db.collection('things').valueChanges();\n    //this.things.subscribe(console.log);\n\n    this.hits = db.collection('alerts').valueChanges();\n    this.hits.subscribe(console.log);\n\n    //this.dbRef = this.firestore.collection('alerts');\n    //this.geoFire = geofirex.init(this.dbRef);\n\n\n    //firebase.initializeApp(this.firebaseConfig);\n    //this.geoFire = geofirex.init(firebase);\n  }\n\n  setLocation(key:string, coords: Array<number>){\n    // this.geoFire.set(key, coords)\n    //   .then(()=>{\n    //     return console.log('location updated');\n    //   })\n    //   .catch(err => console.log(err));\n  }\n\n  getLocations(radius: number, coords: Array<number>){\n    // this.geoFire.query({\n    //   center: coords,\n    //   radius:radius\n    // })\n    // .on('key entered', (key, location, distance)=>{\n    //   let hit = {\n    //     location: location,\n    //     distance: distance\n    //   }\n    //   let currentHits = this.hits.value\n    //   currentHits.push(hit)\n    //   this.hits.next(currentHits)\n    // });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebaseConfig: {apiKey: \"AIzaSyA6y_z7dvkzp3K1DcY-ZscHrFuXGu9gKaI\",\n  authDomain: \"together-corona.firebaseapp.com\",\n  databaseURL: \"https://together-corona.firebaseio.com\",\n  projectId: \"together-corona\",\n  storageBucket: \"together-corona.appspot.com\",\n  messagingSenderId: \"354068360803\",\n  appId: \"1:354068360803:web:4c28d7f7f882ff2b6f9256\"},\n  //googleMapsKey: 'AIzaSyDdZD0Rsf1mCKYSh1Xu9I1d3uNIZM2hNEo'\n  googleMapsKey: 'AIzaSyDC2_ed_CHyauhbeGlDbZghelMnJJNh5IM'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}